<h3>Basic Button Bar</h3>

<p>
	Use the <code>&#123;&#123;topcoat-button-bar&#125;&#125;</code>
	component with an array for the <code>content</code> parameter to
	generate a button bar.
</p>

{{topcoat-button-bar content=items}}<br>
{{topcoat-button-bar content=items large=true}}<br>

<p>{{show-code show=showBasicCode}}</p>

{{#if showBasicCode}}
{{#prettify lang="js" linenums="1"}}
App.ApplicationController = Ember.Controller.extend({
  items: ['one', 'two', 'three']
});
{{/prettify}}
{{#prettify lang="hbs" linenums="1"}}
&#123;&#123;topcoat-button-bar content=items&#125;&#125;
&#123;&#123;topcoat-button-bar content=items large=true&#125;&#125;
{{/prettify}}
{{/if}}

<p>
	The button bar accepts an <code>action</code> parameter. The action
	will be called on the current controller when the button is
	clicked/tapped with the value for that button.
</p>

<p class="lead">Hit one:</p>
{{topcoat-button-bar content=items action="alert"}}<br>

<p>{{show-code show=showBasicActionCode}}</p>

{{#if showBasicActionCode}}
{{#prettify lang="js" linenums="1"}}
App.ApplicationController = Ember.Controller.extend({
  items: ['one', 'two', 'three'],
  actions: {
    alert: function (val) {
      alert(val);
    }
  }
});
{{/prettify}}
{{#prettify lang="hbs" linenums="1"}}
&#123;&#123;topcoat-button-bar content=items action="alert"&#125;&#125;
{{/prettify}}
{{/if}}

<p>
	Override the component's <code>targetObject</code> property to change
	the context for the action.
</p>

<h3>Style fix</h3>


<div class="button-bar-fix">
	{{topcoat-button-bar content=items}}<br>
</div>

<p>
	Unfortunately Ember's Metamorph HTML syntax breaks the button bar's
	style. This plugin does not provide the required CSS fix, but you can
	add it to your own styles if you require it:
</p>

{{#prettify lang="css" linenums="1"}}
.topcoat-button-bar > .topcoat-button-bar__item:first-of-type {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}

.topcoat-button-bar > .topcoat-button-bar__item:last-of-type {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}

.topcoat-button-bar__item:first-of-type > .topcoat-button-bar__button,
.topcoat-button-bar__item:first-of-type > .topcoat-button-bar__button--large {
  border-right: none;
}

.topcoat-button-bar__item:last-of-type > .topcoat-button-bar__button,
.topcoat-button-bar__item:last-of-type > .topcoat-button-bar__button--large {
  border-left: none;
}
{{/prettify}}

<h3>Select and Toggle Button Bars</h3>

<p>
	These are based on the
	<a href="http://codepen.io/Topcoat/pen/kdKyg">mobile button bar</a>
	on the
	<a href="http://topcoat.io/topcoat/#button-bar">Topcoat website</a>.
	Define the button bar with <code>type="select"</code> for radio button
	behaviour, or <code>type="toggle"</code> for checkbox behaviour. The
	selected item(s) will be bound to the component's <code>selection</code>
	property.
</p>

<h4>Select Button Bar</h4>

{{topcoat-button-bar content=items type="select" value=selectedItem}}&nbsp;
<p class="lead">Selected: <strong>{{selectedItem}}</strong></p>

<p>{{show-code show=showSelectCode}}</p>

{{#if showSelectCode}}
{{#prettify lang="js" linenums="1"}}
App.ApplicationController = Ember.Controller.extend({
  items: ['one', 'two', 'three'],
  selectedItem: '{{selectedItem}}'
});
{{/prettify}}
{{#prettify lang="hbs" linenums="1"}}
&#123;&#123;topcoat-button-bar type="select" content=items value=selectedItem&#125;&#125;
Selected: &#123;&#123;selectedItem&#125;&#125;
{{/prettify}}
{{/if}}

<h4>Toggle Button Bar</h4>

{{topcoat-button-bar content=items type="toggle" value=selectedItems}}&nbsp;
<p class="lead">Selected: <strong>{{selectedItemsDisplay}}</strong></p>

<p>{{show-code show=showToggleCode}}</p>

{{#if showToggleCode}}
{{#prettify lang="js" linenums="1"}}
App.ApplicationController = Ember.Controller.extend({
  items: ['one', 'two', 'three'],
  selectedItems: {{selectedItemsArrayDisplay}}
});
{{/prettify}}
{{#prettify lang="hbs" linenums="1"}}
&#123;&#123;topcoat-button-bar type="toggle" content=items value=selectedItems&#125;&#125;
Selected: &#123;&#123;selectedItems&#125;&#125;
{{/prettify}}
{{/if}}

<p>
	The select and toggle buttons bars have the same API as
	<a href="http://emberjs.com/api/classes/Ember.Select.html">
		<code>Ember.Select</code>
	</a>. That's because <code>Ember.Select</code> is used internally
	to manage the selections. This means you can specify
	<code>optionValuePath</code> and <code>optionLabelPath</code>
	for content where each element is an object.
<p>

{{topcoat-button-bar type="select"
	content=items2
	value=selectedNumber
	optionValuePath="content.number"
	optionLabelPath="content.name"
}}&nbsp;
<p class="lead">Selected: {{selectedNumber.number}}</strong></p>

<p>{{show-code show=showOptionCode}}</p>

{{#if showOptionCode}}
{{#prettify lang="js" linenums="1"}}
App.ApplicationController = Ember.Controller.extend({
  first: {name: 'First', number: 1},
  second: {name: 'Second', number: 2},
  third: {name: 'Third', number: 3},

  items: function () {
    return [
      this.get('first'),
      this.get('second'),
      this.get('third')
    ];
  }.property(),

  // Current value: {{#if selectedNumber}}&#123;name: '{{selectedNumber.name}}', number: {{selectedNumber.number}}&#125;{{/if}}
  selectedItem: function () {
    return this.get('second');
  }.property()
});
{{/prettify}}
{{#prettify lang="hbs" linenums="1"}}
&#123;&#123;topcoat-button-bar type="toggle"
  content=items
  value=selectedItem
  optionValuePath="content.number"
  optionLabelPath="content.name"
&#125;&#125;
Selected: &#123;&#123;selectedItem&#125;&#125;
{{/prettify}}
{{/if}}

<p>
	<strong>Heads Up!</strong>
	Selected buttons will only appear as active when using
	<strong>Ember.js v.1.4.0-beta.1</strong> and later. This is due
	to metamorph tags from the unoptimized <code>&#123;&#123;unbound if&#125;&#125;</code>
	helper. See <a href="https://github.com/emberjs/ember.js/pull/3881">ember/ember.js#3881</a>.
</p>


<h3>Extending the Button Bar</h3>

<p>Define your new button bar component by extending or reopening <code>TC.TopcoatButtonBarComponent</code>. Be sure to define a template.</p>

{{#prettify lang="js" linenums=1}}
// Define your own template or use the default:
Ember.TEMPLATES['components/my-button-bar']
  = Ember.TEMPLATES['components/topcoat-button-bar'];

App.MyButtonBarComponent = TC.TopcoatButtonBarComponent.extend({
  ...
});
{{/prettify}}

<p>Template usage:</p>
{{#prettify lang="hbs" linenums=1}}
&#123;&#123;my-button-bar ...&#125;&#125;
{{/prettify}}
